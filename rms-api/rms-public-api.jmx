<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="RMS-PUBLIC-API" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Azure LT environement configurations" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="subscriptionId" elementType="Argument">
            <stringProp name="Argument.name">subscriptionId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;subscriptionId&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="accountName" elementType="Argument">
            <stringProp name="Argument.name">accountName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;accountName&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="storageAccountName" elementType="Argument">
            <stringProp name="Argument.name">storageAccountName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;storageAccountName&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="resourceGroup" elementType="Argument">
            <stringProp name="Argument.name">resourceGroup</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;resourceGroup&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="api-version" elementType="Argument">
            <stringProp name="Argument.name">api-version</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;api-version&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="assetName" elementType="Argument">
            <stringProp name="Argument.name">assetName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;assetName&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="transformName" elementType="Argument">
            <stringProp name="Argument.name">transformName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;transformName&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="jobName" elementType="Argument">
            <stringProp name="Argument.name">jobName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;jobName&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="liveEventName" elementType="Argument">
            <stringProp name="Argument.name">liveEventName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;liveEventName&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="liveOutputName" elementType="Argument">
            <stringProp name="Argument.name">liveOutputName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;liveOutputName&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="streamingEndpointName" elementType="Argument">
            <stringProp name="Argument.name">streamingEndpointName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;streamingEndpointName&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="streamingPolicyName" elementType="Argument">
            <stringProp name="Argument.name">streamingPolicyName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;streamingPolicyName&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="streamingLocatorName" elementType="Argument">
            <stringProp name="Argument.name">streamingLocatorName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;streamingLocatorName&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="location" elementType="Argument">
            <stringProp name="Argument.name">location</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;location&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="AccessToken" elementType="Argument">
            <stringProp name="Argument.name">AccessToken</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;AccessToken&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="apiEndpoint" elementType="Argument">
            <stringProp name="Argument.name">apiEndpoint</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;apiEndpoint&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="rmsApiKey" elementType="Argument">
            <stringProp name="Argument.name">rmsApiKey</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;rmsApiKey&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Default environement configuration" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="subscriptionId_local" elementType="Argument">
            <stringProp name="Argument.name">subscriptionId_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">f0d5c515-ed20-49fd-a9c5-d3b336f7df5a</stringProp>
          </elementProp>
          <elementProp name="accountName_local" elementType="Argument">
            <stringProp name="Argument.name">accountName_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">default</stringProp>
          </elementProp>
          <elementProp name="storageAccountName_local" elementType="Argument">
            <stringProp name="Argument.name">storageAccountName_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">strmsjbawltw6e55jc</stringProp>
          </elementProp>
          <elementProp name="resourceGroup_local" elementType="Argument">
            <stringProp name="Argument.name">resourceGroup_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">rg-rms-perftest-westeurope</stringProp>
          </elementProp>
          <elementProp name="api-version_local" elementType="Argument">
            <stringProp name="Argument.name">api-version_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">2018-07-01</stringProp>
          </elementProp>
          <elementProp name="assetName_local" elementType="Argument">
            <stringProp name="Argument.name">assetName_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">testAsset1</stringProp>
          </elementProp>
          <elementProp name="transformName_local" elementType="Argument">
            <stringProp name="Argument.name">transformName_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">testTransform1</stringProp>
          </elementProp>
          <elementProp name="jobName_local" elementType="Argument">
            <stringProp name="Argument.name">jobName_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">testJob1</stringProp>
          </elementProp>
          <elementProp name="liveEventName_local" elementType="Argument">
            <stringProp name="Argument.name">liveEventName_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">testLiveEvent1</stringProp>
          </elementProp>
          <elementProp name="liveOutputName_local" elementType="Argument">
            <stringProp name="Argument.name">liveOutputName_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">testLiveOutput1</stringProp>
          </elementProp>
          <elementProp name="streamingEndpointName_local" elementType="Argument">
            <stringProp name="Argument.name">streamingEndpointName_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">default</stringProp>
          </elementProp>
          <elementProp name="streamingPolicyName_local" elementType="Argument">
            <stringProp name="Argument.name">streamingPolicyName_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">testStreamingPolicy1</stringProp>
          </elementProp>
          <elementProp name="streamingLocatorName_local" elementType="Argument">
            <stringProp name="Argument.name">streamingLocatorName_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">testStreamingLocator1</stringProp>
          </elementProp>
          <elementProp name="location_local" elementType="Argument">
            <stringProp name="Argument.name">location_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">westus2</stringProp>
          </elementProp>
          <elementProp name="apiEndpoint_local" elementType="Argument">
            <stringProp name="Argument.name">apiEndpoint_local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">rms.lghoydp2mevhg.ravnur.net</stringProp>
          </elementProp>
          <elementProp name="rmsApiKey_local" elementType="Argument">
            <stringProp name="Argument.name">rmsApiKey_local</stringProp>
            <stringProp name="Argument.value">tubZGP3mS8pTQM9VXGEVEznp</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Azure LT environement Threads Testing Properties" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="asts_number_of_threads" elementType="Argument">
            <stringProp name="Argument.name">asts_number_of_threads</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;astsNumberOfThreads&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="asts_rump_up_period" elementType="Argument">
            <stringProp name="Argument.name">asts_rump_up_period</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;astsRumpUpPeriod&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="asts_loop_count" elementType="Argument">
            <stringProp name="Argument.name">asts_loop_count</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;astsLoopCount&quot;) )}</stringProp>
          </elementProp>
          <elementProp name="asts_max_number_of_assets_retrive" elementType="Argument">
            <stringProp name="Argument.name">asts_max_number_of_assets_retrive</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;astsMaxNumberOfAssetsRetrive&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_assetname_random_string_length" elementType="Argument">
            <stringProp name="Argument.name">asts_assetname_random_string_length</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;astsRandomStringLength&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_ListAssets_loop_count" elementType="Argument">
            <stringProp name="Argument.name">asts_ListAssets_loop_count</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;astsListAssetsLC&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_GetAnAsset_loop_count" elementType="Argument">
            <stringProp name="Argument.name">asts_GetAnAsset_loop_count</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;astsGetAnAssetLC&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_CreateOrUpdateAsset_loop_count" elementType="Argument">
            <stringProp name="Argument.name">asts_CreateOrUpdateAsset_loop_count</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;astsCreateOrUpdateAssetLC&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_ListAnAssetURLs_loop_count" elementType="Argument">
            <stringProp name="Argument.name">asts_ListAnAssetURLs_loop_count</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;astsListAnAssetURLsLC&quot;) )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Default Threads Running Properties" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="gAuthToken_number_of_threads_default" elementType="Argument">
            <stringProp name="Argument.name">gAuthToken_number_of_threads_default</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">1</stringProp>
          </elementProp>
          <elementProp name="gAuthToken_rump_up_period_default" elementType="Argument">
            <stringProp name="Argument.name">gAuthToken_rump_up_period_default</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">1</stringProp>
          </elementProp>
          <elementProp name="gAuthToken_loop_count_default" elementType="Argument">
            <stringProp name="Argument.name">gAuthToken_loop_count_default</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">1</stringProp>
          </elementProp>
          <elementProp name="asts_number_of_threads_default" elementType="Argument">
            <stringProp name="Argument.name">asts_number_of_threads_default</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_rump_up_period_default" elementType="Argument">
            <stringProp name="Argument.name">asts_rump_up_period_default</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_loop_count_default" elementType="Argument">
            <stringProp name="Argument.name">asts_loop_count_default</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_max_number_of_assets_retrive_default" elementType="Argument">
            <stringProp name="Argument.name">asts_max_number_of_assets_retrive_default</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_assetname_random_string_length_default" elementType="Argument">
            <stringProp name="Argument.name">asts_assetname_random_string_length_default</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_ListAssets_loop_count_default" elementType="Argument">
            <stringProp name="Argument.name">asts_ListAssets_loop_count_default</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_GetAnAsset_loop_count_default" elementType="Argument">
            <stringProp name="Argument.name">asts_GetAnAsset_loop_count_default</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_CreateOrUpdateAsset_loop_count_default" elementType="Argument">
            <stringProp name="Argument.name">asts_CreateOrUpdateAsset_loop_count_default</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="asts_ListAnAssetURLs_loop_count_default" elementType="Argument">
            <stringProp name="Argument.name">asts_ListAnAssetURLs_loop_count_default</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Check Azure LT envirenement for Thread Properties" enabled="true">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="script">// Checking if JMeter configuration running in Azure Load Testing evnvironement

String[] list_of_parameters = [&quot;asts_number_of_threads&quot;, &quot;asts_rump_up_period&quot;, &quot;asts_loop_count&quot;, &quot;asts_max_number_of_assets_retrive&quot;,
&quot;asts_assetname_random_string_length&quot;, &quot;asts_ListAssets_loop_count&quot;, &quot;asts_GetAnAsset_loop_count&quot;, &quot;asts_CreateOrUpdateAsset_loop_count&quot;,
&quot;asts_ListAnAssetURLs_loop_count&quot;]

</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Check Azure LT environement for configurations" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">// Checking if JMeter configuration running in Azure Load Testing evnvironement





if(vars.get(&quot;subscriptionId&quot;).isEmpty()){
	vars.put(&quot;subscriptionId&quot;, vars.get(&quot;subscriptionId_local&quot;));
}

if(vars.get(&quot;accountName&quot;).isEmpty()){
	vars.put(&quot;accountName&quot;, vars.get(&quot;accountName_local&quot;));
}

if(vars.get(&quot;storageAccountName&quot;).isEmpty()){
	vars.put(&quot;storageAccountName&quot;, vars.get(&quot;storageAccountName_local&quot;));
}

if(vars.get(&quot;resourceGroup&quot;).isEmpty()){
	vars.put(&quot;resourceGroup&quot;, vars.get(&quot;resourceGroup_local&quot;));
}

if(vars.get(&quot;api-version&quot;).isEmpty()){
	vars.put(&quot;api-version&quot;, vars.get(&quot;api-version_local&quot;));
}

if(vars.get(&quot;assetName&quot;).isEmpty()){
	vars.put(&quot;assetName&quot;, vars.get(&quot;assetName_local&quot;));
}

if(vars.get(&quot;transformName&quot;).isEmpty()){
	vars.put(&quot;transformName&quot;, vars.get(&quot;transformName_local&quot;));
}

if(vars.get(&quot;jobName&quot;).isEmpty()){
	vars.put(&quot;jobName&quot;, vars.get(&quot;jobName_local&quot;));
}

if(vars.get(&quot;liveEventName&quot;).isEmpty()){
	vars.put(&quot;liveEventName&quot;, vars.get(&quot;liveEventName_local&quot;));
}

if(vars.get(&quot;liveOutputName&quot;).isEmpty()){
	vars.put(&quot;liveOutputName&quot;, vars.get(&quot;liveOutputName_local&quot;));
}

if(vars.get(&quot;streamingEndpointName&quot;).isEmpty()){
	vars.put(&quot;streamingEndpointName&quot;, vars.get(&quot;streamingEndpointName_local&quot;));
}

if(vars.get(&quot;streamingPolicyName&quot;).isEmpty()){
	vars.put(&quot;streamingPolicyName&quot;, vars.get(&quot;streamingPolicyName_local&quot;));
}

if(vars.get(&quot;streamingLocatorName&quot;).isEmpty()){
	vars.put(&quot;streamingLocatorName&quot;, vars.get(&quot;streamingLocatorName_local&quot;));
}

if(vars.get(&quot;location&quot;).isEmpty()){
	vars.put(&quot;location&quot;, vars.get(&quot;location_local&quot;));
}

if(vars.get(&quot;apiEndpoint&quot;).length() == 0){
	vars.put(&quot;apiEndpoint&quot;, vars.get(&quot;apiEndpoint_local&quot;));
}

if(vars.get(&quot;rmsApiKey&quot;).length() == 0){
	vars.put(&quot;rmsApiKey&quot;, vars.get(&quot;rmsApiKey_local&quot;));
}

// if(vars.get(&quot;&quot;).length() == 0){
// 	vars.put(&quot;&quot;, vars.get(&quot;_local&quot;));
// }

</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Check Azure LT envirenement for Thread Properties" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">// Checking if JMeter configuration running in Azure Load Testing evnvironement
if(vars.get(&quot;asts_number_of_threads&quot;) == 0 || vars.get(&quot;asts_number_of_threads&quot;).isEmpty()){
	vars.put(&quot;asts_number_of_threads&quot;, vars.get(&quot;asts_number_of_threads_default&quot;));
}

if(vars.get(&quot;asts_rump_up_period&quot;) == 0 || vars.get(&quot;asts_rump_up_period&quot;).isEmpty()){
	vars.put(&quot;asts_rump_up_period&quot;, vars.get(&quot;asts_rump_up_period_default&quot;));
}

if(vars.get(&quot;asts_loop_count&quot;) == 0 || vars.get(&quot;asts_loop_count&quot;).isEmpty()){
	vars.put(&quot;asts_loop_count&quot;, vars.get(&quot;asts_loop_count_default&quot;));
}

if(vars.get(&quot;asts_max_number_of_assets_retrive&quot;) == 0 || vars.get(&quot;asts_max_number_of_assets_retrive&quot;).isEmpty()){
	vars.put(&quot;asts_max_number_of_assets_retrive&quot;, vars.get(&quot;asts_max_number_of_assets_retrive_default&quot;));
}

if(vars.get(&quot;asts_assetname_random_string_length&quot;) == 0 || vars.get(&quot;asts_assetname_random_string_length&quot;).isEmpty()){
	vars.put(&quot;asts_assetname_random_string_length&quot;, vars.get(&quot;asts_assetname_random_string_length_default&quot;));
}

// if(vars.get(&quot;&quot;).isEmpty()){
// 	vars.put(&quot;&quot;, vars.get(&quot;_default&quot;));
// }

</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Get AAD Authorization Token — gAuthToken" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">${gAuthToken_loop_count_default}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${gAuthToken_number_of_threads_default}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${gAuthToken_rump_up_period_default}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="TestPlan.comments">Get AAD Authorization Token</stringProp>
      </SetupThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Base headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Keep-Alive</stringProp>
              <stringProp name="Header.value">true</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Access Token" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;subscriptionId&quot;: &quot;${subscriptionId}&quot;,&#xd;
    &quot;apiKey&quot;: &quot;${rmsApiKey}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${apiEndpoint}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/auth/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save AccessToken" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">vars.put(&quot;AccessToken&quot;, new String(data));
props.put(&quot;AccessToken&quot;, new String(data));</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Get Access Token" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results of Getting Access Token" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Authorization Header" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${__P(AccessToken)}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Assets testing — asts" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">${asts_loop_count_default}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${asts_number_of_threads_default}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${asts_rump_up_period_default}</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Base headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Keep-Alive</stringProp>
              <stringProp name="Header.value">true</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop over Running List Assets" enabled="true">
          <stringProp name="LoopController.loops">${asts_ListAssets_loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Run List Assets" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="1336561675">RMS-PUBLIC-API</stringProp>
              <stringProp name="-1137007382">Assets testing — asts</stringProp>
              <stringProp name="621244741">List Assets</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop over Running Get an Asset" enabled="true">
          <stringProp name="LoopController.loops">${asts_GetAnAsset_loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Run Get an Asset" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="1336561675">RMS-PUBLIC-API</stringProp>
              <stringProp name="-1137007382">Assets testing — asts</stringProp>
              <stringProp name="1811483335">Get an Asset</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop over Create or Update and Asset" enabled="true">
          <stringProp name="LoopController.loops">${asts_CreateOrUpdateAsset_loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Run Create or Update an Asset" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="1336561675">RMS-PUBLIC-API</stringProp>
              <stringProp name="-1137007382">Assets testing — asts</stringProp>
              <stringProp name="-523984933">Create or update an Asset</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop over List the Asset URLs" enabled="true">
          <stringProp name="LoopController.loops">${asts_ListAnAssetURLs_loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Run List the Asset URLs" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="1336561675">RMS-PUBLIC-API</stringProp>
              <stringProp name="-1137007382">Assets testing — asts</stringProp>
              <stringProp name="836960005">List the Asset URLs</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="List Assets" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Retrive the list of assets" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="api-version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">api-version</stringProp>
                  <stringProp name="Argument.value">${api-version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${apiEndpoint}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${listAssetsRequestPath}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Prepare request path" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// /subscriptions/${subscriptionId}/resourceGroups/${resourceGroup)/providers/Microsoft.Media/mediaServices/${accountName}/assets

String request_path = &quot;/subscriptions/&quot;;
request_path += vars.get(&quot;subscriptionId&quot;);
request_path += &quot;/resourceGroups/&quot;;
request_path += vars.get(&quot;resourceGroup&quot;);
request_path += &quot;/providers/Microsoft.Media/mediaServices/&quot;;
request_path += vars.get(&quot;accountName&quot;);
request_path += &quot;/assets&quot;;

log.info(&quot;Request path is: &quot; + request_path);
vars.put(&quot;listAssetsRequestPath&quot;, request_path);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Parse JSON from response" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

String max_paths_to_retrive_as_string = vars.get(&quot;asts_max_number_of_assets_retrive&quot;)
int max_paths_to_retrive = max_paths_to_retrive_as_string?.isInteger() ? max_paths_to_retrive_as_string as Integer : null

def json_object = new JsonSlurper().parseText(prev.getResponseDataAsString())

def list_of_assets = json_object.get(&quot;value&quot;)
List&lt;String&gt; asset_id_list = new ArrayList&lt;&gt;()
List&lt;String&gt; asset_path_list = new ArrayList&lt;&gt;()

list_of_assets.eachWithIndex{next_asset,index-&gt;
    String next_asset_id = next_asset.get(&quot;properties&quot;).get(&quot;assetId&quot;)
    String next_asset_path = next_asset.get(&quot;id&quot;)
    asset_id_list.add(next_asset_id)
    asset_path_list.add(next_asset_path)
}

vars.putObject(&quot;list_of_asset_ids&quot;, asset_id_list)
vars.put(&quot;size_of_list_of_asset_ids&quot;, asset_id_list.size as String)

for(int i = 1; i &lt;= max_paths_to_retrive; i++){
	def next_path = null
	while(next_path == null){
		next_path = asset_path_list[new Random().nextInt(asset_path_list.size + 1)]
	}
	String var_id = &quot;asset_path_&quot; + i
	vars.put(var_id, next_path)
}


</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Get an Asset" enabled="false"/>
        <hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Iterate each asset" enabled="true">
            <stringProp name="ForeachController.inputVal">asset_path</stringProp>
            <stringProp name="ForeachController.returnVal">current_asset_path</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="ForeachController.startIndex">1</stringProp>
            <stringProp name="ForeachController.endIndex">${asts_max_number_of_assets_retrive}</stringProp>
          </ForeachController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get an asset" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="api-version" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">api-version</stringProp>
                    <stringProp name="Argument.value">${api-version}</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${apiEndpoint}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.path">${current_asset_path}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Iteration" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results of Iterations" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Create or update an Asset" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create or update an Asset" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${apiEndpoint}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${createUpdateRequestPath}?api-version=${api-version}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare request path" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">// /subscriptions/:subscriptionId/resourceGroups/:resourceGroup/providers/Microsoft.Media/mediaServices/:accountName/assets/:assetName?api-version={{api-version}}

String request_path = &quot;/subscriptions/&quot;
request_path += vars.get(&quot;subscriptionId&quot;)
request_path += &quot;/resourceGroups/&quot;
request_path += vars.get(&quot;resourceGroup&quot;)
request_path += &quot;/providers/Microsoft.Media/mediaServices/&quot;
request_path += vars.get(&quot;accountName&quot;)
request_path += &quot;/assets/&quot;

int length = vars.get(&quot;asts_assetname_random_string_length&quot;) as int // the size of the random string
def pool = (&apos;a&apos;..&apos;z&apos;) + (&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;) //.flatten() // generating pool
Random random = new Random(System.currentTimeMillis())
length -= 1
// the loop should be from 0 to length – 1, then the char length would be length
def randomChars = (0..length).collect { pool[random.nextInt(pool.size())] }
String random_name = randomChars.join()

request_path += random_name

vars.put(&quot;createUpdateRequestPath&quot;, request_path)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results of Create or Update request" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="List the Asset URLs" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List the Asset URLs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${apiEndpoint}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare request path" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">https://{{apiEndpoint}}/subscriptions/{{subscriptionId}}/resourceGroups/{{resourceGroup}}/providers/Microsoft.Media/mediaServices/{{accountName}}/assets/:assetName/listContainerSas?api-version={{api-version}}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Asset Testing Thread" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results of Asset Testing Thread" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
